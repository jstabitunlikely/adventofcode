{
	"AoC Day": {
		"scope": "python",
		"prefix": "aoc_day",
		"body": [
			"from Day import Day",
			"",
			"",
			"class Day${2:DAY}(Day):",
			"",
			"    def __init__(self,",
			"                 auto_fetch: bool = True,",
			"                 auto_parse: bool = True) -> None:",
			"        super().__init__(year='${1:YEAR}', day='${2:DAY}', auto_fetch=auto_fetch, auto_parse=auto_parse)",
			"",
			"    def parse_puzzle(self) -> None:",
			"        # Implement parser here",
			"        # self.puzzle = ...",
			"        pass",
			"",
			"    def solve_part_1(self):",
			"        # Implement solution part 1 here",
			"        pass",
			"",
			"    def solve_part_2(self):",
			"        # Implement solution part 2 here",
			"        pass",
			"",
			"",
			"def main() -> dict[str, str]:  # pragma: no cover",
			"    today = Day${2:DAY}()",
			"    today.solve()",
			"    return today.answer",
			"",
			"",
			"if __name__ == \"__main__\":  # pragma: no cover",
			"    answer = main()",
			"    print(f'Part 1: {answer['part_1']}')",
			"    print(f'Part 2: {answer['part_2']}')",
			""
		],
		"description": "Daily AoC solution"
	},
	"Test AoC Day": {
		"prefix": "test_aoc_day",
		"scope": "python",
		"body": [
			"import pytest",
			"from Day${1:DAY} import Day${1:DAY}",
			"",
			"",
			"EXAMPLE = \"\"\"\\",
			"\\",
			"\"\"\"",
			"",
			"EXPECTED = {",
			"    'part_1': ${2:EXPECTED_1},",
			"    'part_2': ${3:EXPECTED_2},",
			"}",
			"",
			"",
			"@pytest.fixture",
			"def answer():",
			"    today = Day${1:DAY}(auto_fetch=False)",
			"    today.puzzle_raw = EXAMPLE",
			"    today.parse_puzzle()",
			"    today.solve()",
			"    return today.answer",
			"",
			"",
			"def test_answer_part_1(answer):",
			"    assert answer['part_1'] == EXPECTED['part_1']",
			"",
			"",
			"def test_answer_part_2(answer):",
			"    assert answer['part_2'] == EXPECTED['part_2']",
			""
		],
		"description": "Test for Daily AoC solution"
	}
}
